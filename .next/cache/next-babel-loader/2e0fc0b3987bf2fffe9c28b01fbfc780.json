{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\my-projects\\\\shoe-store\\\\components\\\\ProductsList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n//const apiUrl = 'http://localhost:1337/products';\n// posts will be populated at build time by getStaticProps()\nfunction ProductsList(_ref) {\n  var _this = this;\n\n  var products = _ref.products;\n  return __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 3\n    }\n  }, products.map(function (product) {\n    return __jsx(\"li\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 5\n      }\n    }, product.name);\n  }));\n} // This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries. See the \"Technical details\" section.\n\n\n_c = ProductsList;\nexport var getStaticProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var res, products;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log('get static props'); // Call an external API endpoint to get posts.\n            // You can use any data fetching library\n\n            _context.next = 3;\n            return fetch('http://localhost:1337/products');\n\n          case 3:\n            res = _context.sent;\n            _context.next = 6;\n            return res.json();\n\n          case 6:\n            products = _context.sent;\n            console.log(products); // By returning { props: posts }, the Blog component\n            // will receive `posts` as a prop at build time\n\n            return _context.abrupt(\"return\", {\n              props: {\n                products: products\n              }\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getStaticProps() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport default ProductsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductsList\");","map":{"version":3,"sources":["C:/my-projects/shoe-store/components/ProductsList.js"],"names":["ProductsList","products","map","product","name","getStaticProps","console","log","fetch","res","json","props"],"mappings":";;;;;;AAAA;AAEA;AACA,SAASA,YAAT,OAAoC;AAAA;;AAAA,MAAZC,QAAY,QAAZA,QAAY;AACnC,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEA,QAAQ,CAACC,GAAT,CAAa,UAACC,OAAD;AAAA,WACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,OAAO,CAACC,IAAb,CADa;AAAA,GAAb,CADF,CADD;AAOA,C,CAED;AACA;AACA;;;KAZSJ,Y;AAaT,OAAO,IAAMK,cAAc;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7BC,YAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAD6B,CAE7B;AACA;;AAH6B;AAAA,mBAIXC,KAAK,CAAC,gCAAD,CAJM;;AAAA;AAIvBC,YAAAA,GAJuB;AAAA;AAAA,mBAKNA,GAAG,CAACC,IAAJ,EALM;;AAAA;AAKvBT,YAAAA,QALuB;AAM7BK,YAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ,EAN6B,CAO7B;AACA;;AAR6B,6CAStB;AACNU,cAAAA,KAAK,EAAE;AACNV,gBAAAA,QAAQ,EAARA;AADM;AADD,aATsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdI,cAAc;AAAA;AAAA;AAAA,GAApB;AAgBP,eAAeL,YAAf","sourcesContent":["//const apiUrl = 'http://localhost:1337/products';\r\n\r\n// posts will be populated at build time by getStaticProps()\r\nfunction ProductsList({ products }) {\r\n\treturn (\r\n\t\t<ul>\r\n\t\t\t{products.map((product) => (\r\n\t\t\t\t<li>{product.name}</li>\r\n\t\t\t))}\r\n\t\t</ul>\r\n\t);\r\n}\r\n\r\n// This function gets called at build time on server-side.\r\n// It won't be called on client-side, so you can even do\r\n// direct database queries. See the \"Technical details\" section.\r\nexport const getStaticProps = async () => {\r\n\tconsole.log('get static props');\r\n\t// Call an external API endpoint to get posts.\r\n\t// You can use any data fetching library\r\n\tconst res = await fetch('http://localhost:1337/products');\r\n\tconst products = await res.json();\r\n\tconsole.log(products);\r\n\t// By returning { props: posts }, the Blog component\r\n\t// will receive `posts` as a prop at build time\r\n\treturn {\r\n\t\tprops: {\r\n\t\t\tproducts,\r\n\t\t},\r\n\t};\r\n};\r\n\r\nexport default ProductsList;\r\n"]},"metadata":{},"sourceType":"module"}