{"ast":null,"code":"var _jsxFileName = \"C:\\\\my-projects\\\\shoe-store\\\\components\\\\CheckoutForm.js\";\nvar __jsx = React.createElement;\nimport React, { useContext, useState } from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { Row, Col, Button, Label, Input } from 'reactstrap';\nimport withAuth from '../lib/withAuth';\nimport withLayout from '../lib/withLayout';\nimport { AppContext } from '../lib/AppContext';\nimport CartItems from '../components/CartItems';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nconst PLACE_ORDER = gql`\n\tmutation createOrder($type: createOrderInput!) {\n\t\tcreateOrder(input: $type) {\n\t\t\torder {\n\t\t\t\tid\n\t\t\t}\n\t\t}\n\t}\n`;\n\nconst CheckoutForm = () => {\n  const {\n    globalStore,\n    updateStore\n  } = useContext(AppContext);\n  const {\n    0: shippingAddress,\n    1: setShippingAddress\n  } = useState();\n  const [createOrder] = useMutation(PLACE_ORDER);\n  const {\n    user,\n    cart\n  } = globalStore;\n  const {\n    0: succeeded,\n    1: setSucceeded\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const {\n    0: processing,\n    1: setProcessing\n  } = useState('');\n  const {\n    0: disabled,\n    1: setDisabled\n  } = useState(true);\n  const {\n    0: clientSecret,\n    1: setClientSecret\n  } = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n  const totalPrice = cart.reduce((a, c) => {\n    return a + c.price;\n  }, 0);\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    window.fetch('/api/stripe', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        amount: totalPrice\n      })\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      setClientSecret(data.clientSecret);\n    });\n  }, []);\n  const cardStyle = {\n    style: {\n      base: {\n        color: '#32325d',\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: 'antialiased',\n        fontSize: '16px',\n        '::placeholder': {\n          color: '#32325d'\n        }\n      },\n      invalid: {\n        color: '#fa755a',\n        iconColor: '#fa755a'\n      }\n    }\n  };\n\n  const handleChange = async event => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : '');\n  };\n\n  const placeOrder = async () => {\n    if (!shippingAddress) {\n      return false;\n    }\n\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          address: {\n            city: 'delhi',\n            country: 'US',\n            line1: 'adf',\n            line2: null,\n            postal_code: '18888',\n            state: 'dehli'\n          },\n          email: 'jenny@example.com',\n          name: 'test',\n          phone: '+15555555555'\n        }\n      }\n    });\n    const productIds = cart.reduce((a, c) => {\n      a.push(c.id);\n      return a;\n    }, []);\n    createOrder({\n      variables: {\n        type: {\n          data: {\n            user: user._id,\n            products: productIds,\n            shippingAddress,\n            amount: totalPrice\n          }\n        }\n      }\n    });\n    updateStore('cart', []);\n    localStorage.setItem('cart', JSON.stringify([]));\n  };\n\n  const removeItem = (cart, id) => {\n    cart = removeProductFromCart(cart, id);\n    updateStore('cart', cart);\n    localStorage.setItem('cart', JSON.stringify(cart));\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 3\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 4\n    }\n  }, \"Checkout\"), cart && __jsx(\"div\", {\n    className: \"transparent-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 6\n    }\n  }, \"Total Price: Rs. \", totalPrice), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 6\n    }\n  }, __jsx(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, \"Shipping Address:\"), __jsx(Input, {\n    type: \"textarea\",\n    name: \"text\",\n    id: \"shippingAddress\",\n    onChange: e => setShippingAddress(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }), __jsx(CardElement, {\n    id: \"card-element\",\n    options: cardStyle,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }), __jsx(Button, {\n    onClick: placeOrder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }, \"Place Order\"), error && __jsx(\"div\", {\n    className: \"card-error\",\n    role: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 8\n    }\n  }, error), __jsx(\"p\", {\n    className: succeeded ? 'result-message' : 'result-message hidden',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }, \"Payment succeeded, see the result in your\", __jsx(\"a\", {\n    href: `https://dashboard.stripe.com/test/payments`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 8\n    }\n  }, \" Stripe dashboard.\"), \" Refresh the page to pay again.\"))));\n};\n\nexport default CheckoutForm;","map":{"version":3,"sources":["C:/my-projects/shoe-store/components/CheckoutForm.js"],"names":["React","useContext","useState","CardElement","useStripe","useElements","Row","Col","Button","Label","Input","withAuth","withLayout","AppContext","CartItems","gql","useMutation","PLACE_ORDER","CheckoutForm","globalStore","updateStore","shippingAddress","setShippingAddress","createOrder","user","cart","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","stripe","elements","totalPrice","reduce","a","c","price","useEffect","window","fetch","method","headers","body","JSON","stringify","amount","then","res","json","data","cardStyle","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","handleChange","event","empty","message","placeOrder","payload","confirmCardPayment","payment_method","card","getElement","billing_details","address","city","country","line1","line2","postal_code","state","email","name","phone","productIds","push","id","variables","type","_id","products","localStorage","setItem","removeItem","removeProductFromCart","e","target","value"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\r\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\r\nimport { Row, Col, Button, Label, Input } from 'reactstrap';\r\n\r\nimport withAuth from '../lib/withAuth';\r\nimport withLayout from '../lib/withLayout';\r\n\r\nimport { AppContext } from '../lib/AppContext';\r\nimport CartItems from '../components/CartItems';\r\n\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\n\r\nconst PLACE_ORDER = gql`\r\n\tmutation createOrder($type: createOrderInput!) {\r\n\t\tcreateOrder(input: $type) {\r\n\t\t\torder {\r\n\t\t\t\tid\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst CheckoutForm = () => {\r\n\tconst { globalStore, updateStore } = useContext(AppContext);\r\n\tconst [shippingAddress, setShippingAddress] = useState();\r\n\tconst [createOrder] = useMutation(PLACE_ORDER);\r\n\r\n\tconst { user, cart } = globalStore;\r\n\r\n\tconst [succeeded, setSucceeded] = useState(false);\r\n\tconst [error, setError] = useState(null);\r\n\tconst [processing, setProcessing] = useState('');\r\n\tconst [disabled, setDisabled] = useState(true);\r\n\tconst [clientSecret, setClientSecret] = useState('');\r\n\r\n\tconst stripe = useStripe();\r\n\tconst elements = useElements();\r\n\r\n\tconst totalPrice = cart.reduce((a, c) => {\r\n\t\treturn a + c.price;\r\n\t}, 0);\r\n\r\n\tuseEffect(() => {\r\n\t\t// Create PaymentIntent as soon as the page loads\r\n\t\twindow\r\n\t\t\t.fetch('/api/stripe', {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({ amount: totalPrice }),\r\n\t\t\t})\r\n\t\t\t.then((res) => {\r\n\t\t\t\treturn res.json();\r\n\t\t\t})\r\n\t\t\t.then((data) => {\r\n\t\t\t\tsetClientSecret(data.clientSecret);\r\n\t\t\t});\r\n\t}, []);\r\n\r\n\tconst cardStyle = {\r\n\t\tstyle: {\r\n\t\t\tbase: {\r\n\t\t\t\tcolor: '#32325d',\r\n\t\t\t\tfontFamily: 'Arial, sans-serif',\r\n\t\t\t\tfontSmoothing: 'antialiased',\r\n\t\t\t\tfontSize: '16px',\r\n\t\t\t\t'::placeholder': {\r\n\t\t\t\t\tcolor: '#32325d',\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\tinvalid: {\r\n\t\t\t\tcolor: '#fa755a',\r\n\t\t\t\ticonColor: '#fa755a',\r\n\t\t\t},\r\n\t\t},\r\n\t};\r\n\tconst handleChange = async (event) => {\r\n\t\t// Listen for changes in the CardElement\r\n\t\t// and display any errors as the customer types their card details\r\n\t\tsetDisabled(event.empty);\r\n\t\tsetError(event.error ? event.error.message : '');\r\n\t};\r\n\r\n\tconst placeOrder = async () => {\r\n\t\tif (!shippingAddress) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst payload = await stripe.confirmCardPayment(clientSecret, {\r\n\t\t\tpayment_method: {\r\n\t\t\t\tcard: elements.getElement(CardElement),\r\n\t\t\t\tbilling_details: {\r\n\t\t\t\t\taddress: {\r\n\t\t\t\t\t\tcity: 'delhi',\r\n\t\t\t\t\t\tcountry: 'US',\r\n\t\t\t\t\t\tline1: 'adf',\r\n\t\t\t\t\t\tline2: null,\r\n\t\t\t\t\t\tpostal_code: '18888',\r\n\t\t\t\t\t\tstate: 'dehli',\r\n\t\t\t\t\t},\r\n\t\t\t\t\temail: 'jenny@example.com',\r\n\t\t\t\t\tname: 'test',\r\n\t\t\t\t\tphone: '+15555555555',\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\tconst productIds = cart.reduce((a, c) => {\r\n\t\t\ta.push(c.id);\r\n\t\t\treturn a;\r\n\t\t}, []);\r\n\t\tcreateOrder({\r\n\t\t\tvariables: {\r\n\t\t\t\ttype: { data: { user: user._id, products: productIds, shippingAddress, amount: totalPrice } },\r\n\t\t\t},\r\n\t\t});\r\n\t\tupdateStore('cart', []);\r\n\t\tlocalStorage.setItem('cart', JSON.stringify([]));\r\n\t};\r\n\r\n\tconst removeItem = (cart, id) => {\r\n\t\tcart = removeProductFromCart(cart, id);\r\n\t\tupdateStore('cart', cart);\r\n\t\tlocalStorage.setItem('cart', JSON.stringify(cart));\r\n\t};\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h2>Checkout</h2>\r\n\t\t\t{cart && (\r\n\t\t\t\t<div className='transparent-container'>\r\n\t\t\t\t\t<p>Total Price: Rs. {totalPrice}</p>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<Label>Shipping Address:</Label>\r\n\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\ttype='textarea'\r\n\t\t\t\t\t\t\tname='text'\r\n\t\t\t\t\t\t\tid='shippingAddress'\r\n\t\t\t\t\t\t\tonChange={(e) => setShippingAddress(e.target.value)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<CardElement id='card-element' options={cardStyle} onChange={handleChange} />\r\n\t\t\t\t\t\t<Button onClick={placeOrder}>Place Order</Button>\r\n\t\t\t\t\t\t{error && (\r\n\t\t\t\t\t\t\t<div className='card-error' role='alert'>\r\n\t\t\t\t\t\t\t\t{error}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t<p className={succeeded ? 'result-message' : 'result-message hidden'}>\r\n\t\t\t\t\t\t\tPayment succeeded, see the result in your\r\n\t\t\t\t\t\t\t<a href={`https://dashboard.stripe.com/test/payments`}> Stripe dashboard.</a> Refresh the\r\n\t\t\t\t\t\t\tpage to pay again.\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CheckoutForm;\r\n"]},"metadata":{},"sourceType":"module"}