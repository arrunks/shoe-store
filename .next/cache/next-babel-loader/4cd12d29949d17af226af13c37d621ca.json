{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\nimport { useRouter } from 'next/router';\nimport NProgress from 'nprogress';\nimport withLayout from '../lib/withLayout';\nimport withAuth from '../lib/withAuth';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nconst CREATE_USER = gql`\n\tmutation register($type: UserInput!) {\n\t\tregister(input: $type) {\n\t\t\tjwt\n\t\t}\n\t}\n`;\n\nconst Signup = props => {\n  const router = useRouter();\n  const {\n    0: name,\n    1: setName\n  } = useState();\n  const {\n    0: password,\n    1: setPassword\n  } = useState();\n  const {\n    0: passwordSecond,\n    1: setPasswordSecond\n  } = useState();\n  const {\n    0: email,\n    1: setEmail\n  } = useState();\n  const [register, {\n    loading,\n    error\n  }] = useMutation(CREATE_USER, {\n    onCompleted({\n      register\n    }) {\n      document.cookie = `jwt=${register.jwt}; path=/`;\n      router.push('/');\n    }\n\n  });\n\n  if (loading) {\n    NProgress.start();\n  }\n\n  const onFormSubmit = async e => {\n    e.preventDefault();\n    const opts = {\n      username: name,\n      email,\n      password\n    };\n    register({\n      variables: {\n        type: _objectSpread({}, opts)\n      }\n    });\n  };\n\n  return __jsx(\"div\", {\n    className: \"form-wrapper\"\n  }, __jsx(Form, {\n    onSubmit: onFormSubmit\n  }, __jsx(FormGroup, null, __jsx(Label, {\n    for: \"name\"\n  }, \"Name\"), __jsx(Input, {\n    type: \"text\",\n    name: \"name\",\n    id: \"name\",\n    onChange: e => setName(e.target.value),\n    placeholder: \"Enter Name\"\n  })), __jsx(FormGroup, null, __jsx(Label, {\n    for: \"password1\"\n  }, \"Password\"), __jsx(Input, {\n    type: \"password\",\n    name: \"password\",\n    id: \"password1\",\n    onChange: e => setPassword(e.target.value),\n    placeholder: \"Enter Password\"\n  })), __jsx(FormGroup, null, __jsx(Label, {\n    for: \"password2\"\n  }, \"Re-enter Password\"), __jsx(Input, {\n    type: \"password\",\n    name: \"password2\",\n    id: \"password2\",\n    onChange: e => setPasswordSecond(e.target.value),\n    placeholder: \"Enter Password Again\"\n  })), __jsx(FormGroup, null, __jsx(Label, {\n    for: \"Email\"\n  }, \"Email\"), __jsx(Input, {\n    type: \"email\",\n    name: \"email\",\n    id: \"email\",\n    onChange: e => setEmail(e.target.value),\n    placeholder: \"Enter Email\"\n  })), __jsx(Button, null, \"Submit\")));\n};\n\nexport default withAuth(withLayout(Signup), {\n  logoutRequired: true\n});","map":null,"metadata":{},"sourceType":"module"}