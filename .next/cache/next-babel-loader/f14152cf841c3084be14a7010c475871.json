{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Router from 'next/router';\nimport NProgress from 'nprogress';\nimport Header from '../components/Header';\nimport { withApollo } from '../lib/apollo';\n\nRouter.onRouteChangeStart = () => NProgress.start();\n\nRouter.onRouteChangeComplete = () => NProgress.done();\n\nRouter.onRouteChangeError = () => NProgress.done();\n\nimport { AppContext } from './AppContext';\nimport { getUniqueProducts } from '../lib/utils';\n\nfunction withLayout(BaseComponent) {\n  class App extends React.Component {\n    constructor(props) {\n      super(props);\n\n      _defineProperty(this, \"updateValue\", (key, val) => {\n        this.setState({\n          [key]: val\n        });\n      });\n\n      this.state = {\n        user: props.user,\n        cart: []\n      };\n    }\n\n    componentDidMount() {\n      const cartInLocalStorage = JSON.parse(localStorage.getItem('cart'));\n      const cart = cartInLocalStorage ? getUniqueProducts(cartInLocalStorage) : [];\n      this.setState({\n        cart\n      });\n    }\n\n    render() {\n      return __jsx(AppContext.Provider, {\n        value: {\n          globalStore: this.state,\n          updateStore: this.updateValue\n        }\n      }, __jsx(Header, this.props), __jsx(BaseComponent, this.props));\n    }\n\n  }\n\n  App.getInitialProps = ctx => {\n    if (BaseComponent.getInitialProps) {\n      return BaseComponent.getInitialProps(ctx);\n    }\n\n    return {};\n  };\n\n  return withApollo({\n    ssr: true\n  })(App);\n}\n\nexport default withLayout;","map":null,"metadata":{},"sourceType":"module"}