{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext, useState, useEffect } from 'react';\nimport Router from 'next/router';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { Row, Col, Button, Label, Input } from 'reactstrap';\nimport withAuth from '../lib/withAuth';\nimport withLayout from '../lib/withLayout';\nimport { AppContext } from '../lib/AppContext';\nimport CartItems from '../components/CartItems';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nconst PLACE_ORDER = gql`\n\tmutation createOrder($type: createOrderInput!) {\n\t\tcreateOrder(input: $type) {\n\t\t\torder {\n\t\t\t\tid\n\t\t\t}\n\t\t}\n\t}\n`;\n\nconst CheckoutForm = () => {\n  const {\n    globalStore,\n    updateStore\n  } = useContext(AppContext);\n  const {\n    0: shippingAddress,\n    1: setShippingAddress\n  } = useState();\n  const [createOrder] = useMutation(PLACE_ORDER);\n  const {\n    user,\n    cart\n  } = globalStore;\n  const {\n    0: succeeded,\n    1: setSucceeded\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const {\n    0: processing,\n    1: setProcessing\n  } = useState('');\n  const {\n    0: disabled,\n    1: setDisabled\n  } = useState(true);\n  const {\n    0: clientSecret,\n    1: setClientSecret\n  } = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n  const totalPrice = cart.reduce((a, c) => {\n    return a + c.price;\n  }, 0);\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    if (totalPrice) {\n      window.fetch('/api/stripe', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          amount: totalPrice\n        })\n      }).then(res => {\n        return res.json();\n      }).then(data => {\n        setClientSecret(data.clientSecret);\n      });\n    }\n  }, [totalPrice]);\n  const cardStyle = {\n    style: {\n      base: {\n        color: '#32325d',\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: 'antialiased',\n        fontSize: '16px',\n        '::placeholder': {\n          color: '#32325d'\n        },\n        backGroundColor: '#ffffff',\n        height: '400px'\n      },\n      invalid: {\n        color: '#fa755a',\n        iconColor: '#fa755a'\n      }\n    }\n  };\n\n  const handleChange = async event => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : '');\n  };\n\n  const placeOrder = async () => {\n    if (!shippingAddress || disabled) {\n      return false;\n    }\n\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          address: {\n            city: 'delhi',\n            country: 'US',\n            line1: 'adf',\n            line2: null,\n            postal_code: '18888',\n            state: 'dehli'\n          },\n          email: user.email,\n          name: user.username,\n          phone: '+15555555555'\n        }\n      }\n    });\n    const productIds = cart.reduce((a, c) => {\n      a.push(c.id);\n      return a;\n    }, []);\n    createOrder({\n      variables: {\n        type: {\n          data: {\n            user: user._id,\n            products: productIds,\n            shippingAddress,\n            amount: totalPrice\n          }\n        }\n      }\n    });\n    updateStore('cart', []);\n    localStorage.setItem('cart', JSON.stringify([]));\n    Router.push('/orders');\n  };\n\n  const removeItem = (cart, id) => {\n    cart = removeProductFromCart(cart, id);\n    updateStore('cart', cart);\n    localStorage.setItem('cart', JSON.stringify(cart));\n  };\n\n  return __jsx(\"div\", null, !cart && __jsx(\"p\", null, \"No Order in place.\"), cart && __jsx(Row, null, __jsx(Col, null, __jsx(\"div\", {\n    className: \"transparent-container\"\n  }, __jsx(\"p\", null, \"Total Price: Rs. \", totalPrice), __jsx(\"div\", null, __jsx(Row, null, __jsx(Col, null, __jsx(Label, null, \"Enter Card Information\"), __jsx(CardElement, {\n    className: \"card-number-element\",\n    options: cardStyle,\n    onChange: handleChange\n  }))), __jsx(Row, null, __jsx(Col, null, __jsx(Label, null, \"Shipping Address:\"), __jsx(Input, {\n    type: \"textarea\",\n    name: \"text\",\n    id: \"shippingAddress\",\n    onChange: e => setShippingAddress(e.target.value)\n  }))), __jsx(Row, null, __jsx(Col, null, __jsx(Button, {\n    onClick: placeOrder,\n    className: \"mt-4\"\n  }, \"Place Order\"), error && __jsx(\"div\", {\n    className: \"card-error\",\n    role: \"alert\"\n  }, error), __jsx(\"p\", null, \"Testing Card Number: \\\"4000056655665556\\\"\"), __jsx(\"p\", null, \"This is a demo application only and no item will be delivered.\")))))), __jsx(Col, null, __jsx(Col, {\n    md: 6\n  }, __jsx(\"img\", {\n    src: \"https://www.internationalscienceediting.com/wp-content/uploads/2017/06/logo-stripe.png\"\n  })))));\n};\n\nexport default CheckoutForm;","map":null,"metadata":{},"sourceType":"module"}