{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useState, Fragment } from 'react';\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardSubtitle, Button, Row, Col, Toast } from 'reactstrap';\nimport { useRouter } from 'next/router';\nimport { AppContext } from '../lib/AppContext';\nimport { getUniqueProducts } from '../lib/utils';\n\nconst AddToCartButton = ({\n  onClickCallback\n}) => {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    text: 'Add To Cart',\n    addedToCard: false\n  });\n  const router = useRouter();\n\n  const onClick = () => {\n    if (!state.addedToCart) {\n      setState({\n        text: 'Go To Cart',\n        addedToCart: true\n      });\n      onClickCallback();\n    } else {\n      router.push('/cart');\n    }\n  };\n\n  return __jsx(Button, {\n    onClick: onClick,\n    className: \"float-right\"\n  }, state.text);\n};\n\nconst ProductsList = ({\n  products\n}) => {\n  const {\n    globalStore,\n    updateStore\n  } = useContext(AppContext);\n  const {\n    0: showToast,\n    1: setShowToast\n  } = useState(false);\n  const {\n    user,\n    cart\n  } = globalStore;\n\n  const addProductToCart = product => {\n    const cartData = _objectSpread({}, product);\n\n    let updatedCart = [...cart];\n    updatedCart.push(cartData);\n    updateStore('cart', getUniqueProducts(updatedCart));\n    localStorage.setItem('cart', JSON.stringify(updatedCart));\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 2500);\n  };\n\n  return __jsx(\"div\", {\n    className: \"product-container\"\n  }, showToast && __jsx(Toast, null, \"Product Added To cart\"), products.map((product, i) => {\n    const addedToCart = false;\n    return __jsx(Row, {\n      className: \"mb-2\",\n      key: i\n    }, __jsx(Col, null, __jsx(Card, {\n      className: \"p-2\"\n    }, __jsx(Row, null, __jsx(Col, {\n      md: 2\n    }, __jsx(\"div\", {\n      className: \"product-image\"\n    }, __jsx(CardImg, {\n      top: true,\n      width: \"100%\",\n      height: \"100%\",\n      src: `${product.displayImage}`,\n      alt: \"Card image cap\"\n    }))), __jsx(Col, {\n      className: 'align-self-center'\n    }, __jsx(Row, null, __jsx(Col, null, __jsx(CardTitle, {\n      className: \"pl-1\"\n    }, product.name))), __jsx(Row, null, __jsx(Col, null, __jsx(CardSubtitle, {\n      className: \"pl-1\"\n    }, \"Rs. \", product.price)))), __jsx(Col, {\n      className: 'align-self-center'\n    }, __jsx(AddToCartButton, {\n      onClickCallback: () => addProductToCart(product)\n    }))))));\n  }));\n};\n\nexport default ProductsList;","map":null,"metadata":{},"sourceType":"module"}