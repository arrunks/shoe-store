{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\tmutation createOrder($type: createOrderInput!) {\\n\\t\\tcreateOrder(input: $type) {\\n\\t\\t\\torder {\\n\\t\\t\\t\\tid\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport Router from 'next/router';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { Row, Col, Button, Label, Input } from 'reactstrap';\nimport withAuth from '../lib/withAuth';\nimport withLayout from '../lib/withLayout';\nimport { AppContext } from '../lib/AppContext';\nimport CartItems from '../components/CartItems';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nvar PLACE_ORDER = gql(_templateObject());\n\nvar CheckoutForm = function CheckoutForm() {\n  var _useContext = useContext(AppContext),\n      globalStore = _useContext.globalStore,\n      updateStore = _useContext.updateStore;\n\n  var _useState = useState(),\n      shippingAddress = _useState[0],\n      setShippingAddress = _useState[1];\n\n  var _useMutation = useMutation(PLACE_ORDER),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      createOrder = _useMutation2[0];\n\n  var user = globalStore.user,\n      cart = globalStore.cart;\n\n  var _useState2 = useState(false),\n      succeeded = _useState2[0],\n      setSucceeded = _useState2[1];\n\n  var _useState3 = useState(null),\n      error = _useState3[0],\n      setError = _useState3[1];\n\n  var _useState4 = useState(''),\n      processing = _useState4[0],\n      setProcessing = _useState4[1];\n\n  var _useState5 = useState(true),\n      disabled = _useState5[0],\n      setDisabled = _useState5[1];\n\n  var _useState6 = useState(''),\n      clientSecret = _useState6[0],\n      setClientSecret = _useState6[1];\n\n  var stripe = useStripe();\n  var elements = useElements();\n  var totalPrice = cart.reduce(function (a, c) {\n    return a + c.price;\n  }, 0);\n  useEffect(function () {\n    // Create PaymentIntent as soon as the page loads\n    if (totalPrice) {\n      window.fetch('/api/stripe', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          amount: totalPrice\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        setClientSecret(data.clientSecret);\n      });\n    }\n  }, [totalPrice]);\n  var cardStyle = {\n    style: {\n      base: {\n        color: '#32325d',\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: 'antialiased',\n        fontSize: '16px',\n        '::placeholder': {\n          color: '#32325d'\n        },\n        backGroundColor: '#ffffff',\n        height: '400px'\n      },\n      invalid: {\n        color: '#fa755a',\n        iconColor: '#fa755a'\n      }\n    }\n  };\n\n  var handleChange = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // Listen for changes in the CardElement\n              // and display any errors as the customer types their card details\n              setDisabled(event.empty);\n              setError(event.error ? event.error.message : '');\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleChange(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var placeOrder = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var payload, productIds;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(!shippingAddress || disabled)) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", false);\n\n            case 2:\n              _context2.next = 4;\n              return stripe.confirmCardPayment(clientSecret, {\n                payment_method: {\n                  card: elements.getElement(CardElement),\n                  billing_details: {\n                    address: {\n                      city: 'delhi',\n                      country: 'US',\n                      line1: 'adf',\n                      line2: null,\n                      postal_code: '18888',\n                      state: 'dehli'\n                    },\n                    email: user.email,\n                    name: user.username,\n                    phone: '+15555555555'\n                  }\n                }\n              });\n\n            case 4:\n              payload = _context2.sent;\n              productIds = cart.reduce(function (a, c) {\n                a.push(c.id);\n                return a;\n              }, []);\n              createOrder({\n                variables: {\n                  type: {\n                    data: {\n                      user: user._id,\n                      products: productIds,\n                      shippingAddress: shippingAddress,\n                      amount: totalPrice\n                    }\n                  }\n                }\n              });\n              updateStore('cart', []);\n              localStorage.setItem('cart', JSON.stringify([]));\n              Router.push('/orders');\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function placeOrder() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var removeItem = function removeItem(cart, id) {\n    cart = removeProductFromCart(cart, id);\n    updateStore('cart', cart);\n    localStorage.setItem('cart', JSON.stringify(cart));\n  };\n\n  return __jsx(\"div\", null, !cart && __jsx(\"p\", null, \"No Order in place.\"), cart && __jsx(Row, null, __jsx(Col, null, __jsx(\"div\", {\n    className: \"transparent-container\"\n  }, __jsx(\"p\", null, \"Total Price: Rs. \", totalPrice), __jsx(\"div\", null, __jsx(Row, null, __jsx(Col, null, __jsx(Label, null, \"Enter Card Information\"), __jsx(CardElement, {\n    className: \"card-number-element\",\n    options: cardStyle,\n    onChange: handleChange\n  }))), __jsx(Row, null, __jsx(Col, null, __jsx(Label, null, \"Shipping Address:\"), __jsx(Input, {\n    type: \"textarea\",\n    name: \"text\",\n    id: \"shippingAddress\",\n    onChange: function onChange(e) {\n      return setShippingAddress(e.target.value);\n    }\n  }))), __jsx(Row, null, __jsx(Col, null, __jsx(Button, {\n    onClick: placeOrder,\n    className: \"mt-4\"\n  }, \"Place Order\"), error && __jsx(\"div\", {\n    className: \"card-error\",\n    role: \"alert\"\n  }, error), __jsx(\"p\", null, \"Testing Card Number: \\\"4000056655665556\\\"\"), __jsx(\"p\", null, \"This is a demo application only and no item will be delivered.\")))))), __jsx(Col, null, __jsx(Col, {\n    md: 6\n  }, __jsx(\"img\", {\n    src: \"https://www.internationalscienceediting.com/wp-content/uploads/2017/06/logo-stripe.png\"\n  })))));\n};\n\nexport default CheckoutForm;","map":null,"metadata":{},"sourceType":"module"}